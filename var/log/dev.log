[2023-04-13T08:32:20.109788+00:00] deprecation.INFO: User Deprecated: The "Monolog\Logger" class is considered final. It may change without further notice as of its next major version. You should not extend it from "Symfony\Bridge\Monolog\Logger". {"exception":"[object] (ErrorException(code: 0): User Deprecated: The \"Monolog\\Logger\" class is considered final. It may change without further notice as of its next major version. You should not extend it from \"Symfony\\Bridge\\Monolog\\Logger\". at /Users/faisalbouazi/Desktop/Symfony2/notebook/vendor/symfony/error-handler/DebugClassLoader.php:337)"} []
[2023-04-13T09:19:16.620233+00:00] php.DEBUG: Warning: filemtime(): stat failed for /Users/faisalbouazi/Desktop/Symfony2/notebook/config/routes/framework.yaml {"exception":{"Symfony\\Component\\ErrorHandler\\Exception\\SilencedErrorContext":{"severity":2,"file":"/Users/faisalbouazi/Desktop/Symfony2/notebook-symfony/vendor/symfony/config/Resource/FileResource.php","line":58,"trace":[{"file":"/Users/faisalbouazi/Desktop/Symfony2/notebook-symfony/vendor/symfony/config/Resource/SelfCheckingResourceChecker.php","line":44,"function":"isFresh","class":"Symfony\\Component\\Config\\Resource\\FileResource","type":"->"}],"count":1}}} []
[2023-04-13T09:19:17.315998+00:00] request.ERROR: Uncaught PHP Exception Symfony\Component\HttpKernel\Exception\NotFoundHttpException: "No route found for "GET http://127.0.0.1:8000/"" at /Users/faisalbouazi/Desktop/Symfony2/notebook-symfony/vendor/symfony/http-kernel/EventListener/RouterListener.php line 127 {"exception":"[object] (Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException(code: 0): No route found for \"GET http://127.0.0.1:8000/\" at /Users/faisalbouazi/Desktop/Symfony2/notebook-symfony/vendor/symfony/http-kernel/EventListener/RouterListener.php:127)\n[previous exception] [object] (Symfony\\Component\\Routing\\Exception\\NoConfigurationException(code: 0):  at /Users/faisalbouazi/Desktop/Symfony2/notebook-symfony/vendor/symfony/routing/Matcher/Dumper/CompiledUrlMatcherTrait.php:185)"} []
[2023-04-13T09:19:17.495810+00:00] deprecation.INFO: User Deprecated: The "Monolog\Logger" class is considered final. It may change without further notice as of its next major version. You should not extend it from "Symfony\Bridge\Monolog\Logger". {"exception":"[object] (ErrorException(code: 0): User Deprecated: The \"Monolog\\Logger\" class is considered final. It may change without further notice as of its next major version. You should not extend it from \"Symfony\\Bridge\\Monolog\\Logger\". at /Users/faisalbouazi/Desktop/Symfony2/notebook-symfony/vendor/symfony/error-handler/DebugClassLoader.php:337)"} []
[2023-04-13T09:19:17.510629+00:00] request.ERROR: Uncaught PHP Exception Symfony\Component\HttpKernel\Exception\NotFoundHttpException: "No route found for "GET http://127.0.0.1:8000/"" at /Users/faisalbouazi/Desktop/Symfony2/notebook-symfony/vendor/symfony/http-kernel/EventListener/RouterListener.php line 127 {"exception":"[object] (Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException(code: 0): No route found for \"GET http://127.0.0.1:8000/\" at /Users/faisalbouazi/Desktop/Symfony2/notebook-symfony/vendor/symfony/http-kernel/EventListener/RouterListener.php:127)\n[previous exception] [object] (Symfony\\Component\\Routing\\Exception\\NoConfigurationException(code: 0):  at /Users/faisalbouazi/Desktop/Symfony2/notebook-symfony/vendor/symfony/routing/Matcher/Dumper/CompiledUrlMatcherTrait.php:185)"} []
[2023-04-13T09:19:17.644108+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"77fa5d"},"request_uri":"http://127.0.0.1:8000/_wdt/77fa5d","method":"GET"} []
[2023-04-13T09:19:18.058886+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"77fa5d"},"request_uri":"http://127.0.0.1:8000/_wdt/77fa5d","method":"GET"} []
[2023-04-13T09:19:22.752851+00:00] request.ERROR: Uncaught PHP Exception Symfony\Component\HttpKernel\Exception\NotFoundHttpException: "No route found for "GET http://127.0.0.1:8000/"" at /Users/faisalbouazi/Desktop/Symfony2/notebook-symfony/vendor/symfony/http-kernel/EventListener/RouterListener.php line 127 {"exception":"[object] (Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException(code: 0): No route found for \"GET http://127.0.0.1:8000/\" at /Users/faisalbouazi/Desktop/Symfony2/notebook-symfony/vendor/symfony/http-kernel/EventListener/RouterListener.php:127)\n[previous exception] [object] (Symfony\\Component\\Routing\\Exception\\NoConfigurationException(code: 0):  at /Users/faisalbouazi/Desktop/Symfony2/notebook-symfony/vendor/symfony/routing/Matcher/Dumper/CompiledUrlMatcherTrait.php:185)"} []
[2023-04-13T09:19:22.864565+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"8f3306"},"request_uri":"http://127.0.0.1:8000/_wdt/8f3306","method":"GET"} []
[2023-04-13T09:19:23.165854+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"8f3306"},"request_uri":"http://127.0.0.1:8000/_wdt/8f3306","method":"GET"} []
[2023-04-13T09:30:21.482412+00:00] doctrine.INFO: Connecting with parameters array{"driver":"pdo_mysql","host":"127.0.0.1","port":8889,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":[],"serverVersion":"8","charset":"utf8mb4"} {"params":{"driver":"pdo_mysql","host":"127.0.0.1","port":8889,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":[],"serverVersion":"8","charset":"utf8mb4"}} []
[2023-04-13T09:30:21.495413+00:00] doctrine.DEBUG: Executing statement: CREATE DATABASE `notebook` {"sql":"CREATE DATABASE `notebook`"} []
[2023-04-13T09:30:21.497774+00:00] doctrine.INFO: Disconnecting [] []
[2023-04-13T09:32:33.447047+00:00] php.DEBUG: Warning: file(/proc/mounts): Failed to open stream: No such file or directory {"exception":{"Symfony\\Component\\ErrorHandler\\Exception\\SilencedErrorContext":{"severity":2,"file":"/Users/faisalbouazi/Desktop/Symfony2/notebook-symfony/vendor/symfony/framework-bundle/Command/CacheClearCommand.php","line":203,"trace":[{"file":"/Users/faisalbouazi/Desktop/Symfony2/notebook-symfony/vendor/symfony/framework-bundle/Command/CacheClearCommand.php","line":156,"function":"isNfs","class":"Symfony\\Bundle\\FrameworkBundle\\Command\\CacheClearCommand","type":"->"}],"count":1}}} []
[2023-04-13T09:38:50.145774+00:00] console.CRITICAL: Error thrown while running command "mailer:test". Message: "Not enough arguments (missing: "to")." {"exception":"[object] (Symfony\\Component\\Console\\Exception\\RuntimeException(code: 0): Not enough arguments (missing: \"to\"). at /Users/faisalbouazi/Desktop/Symfony2/notebook-symfony/vendor/symfony/console/Input/Input.php:70)","command":"mailer:test","message":"Not enough arguments (missing: \"to\")."} []
[2023-04-13T09:38:50.148279+00:00] console.DEBUG: Command "mailer:test" exited with code "1" {"command":"mailer:test","code":1} []
[2023-04-13T09:39:15.897892+00:00] mailer.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" starting [] []
[2023-04-13T09:39:16.850679+00:00] mailer.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" started [] []
[2023-04-13T09:39:17.320278+00:00] mailer.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" stopping [] []
[2023-04-13T09:39:17.404680+00:00] mailer.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" stopped [] []
[2023-04-13T09:51:18.738012+00:00] deprecation.INFO: User Deprecated: The "Monolog\Logger" class is considered final. It may change without further notice as of its next major version. You should not extend it from "Symfony\Bridge\Monolog\Logger". {"exception":"[object] (ErrorException(code: 0): User Deprecated: The \"Monolog\\Logger\" class is considered final. It may change without further notice as of its next major version. You should not extend it from \"Symfony\\Bridge\\Monolog\\Logger\". at /Users/faisalbouazi/Desktop/Symfony2/notebook-symfony/vendor/symfony/error-handler/DebugClassLoader.php:337)"} []
[2023-04-13T10:01:57.958750+00:00] deprecation.INFO: User Deprecated: The "Monolog\Logger" class is considered final. It may change without further notice as of its next major version. You should not extend it from "Symfony\Bridge\Monolog\Logger". {"exception":"[object] (ErrorException(code: 0): User Deprecated: The \"Monolog\\Logger\" class is considered final. It may change without further notice as of its next major version. You should not extend it from \"Symfony\\Bridge\\Monolog\\Logger\". at /Users/faisalbouazi/Desktop/Symfony2/notebook-symfony/vendor/symfony/error-handler/DebugClassLoader.php:337)"} []
[2023-04-13T10:05:42.533473+00:00] console.DEBUG: Command "make:fixtures" exited with code "1" {"command":"make:fixtures","code":1} []
[2023-04-13T10:35:49.618696+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":8889,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":[],"dbname":"notebook","serverVersion":"8","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":8889,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":[],"dbname":"notebook","serverVersion":"8","charset":"utf8mb4"}} []
[2023-04-13T10:35:49.629376+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2023-04-13T10:35:49.635886+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"notebook"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"notebook"},"types":{"1":2}} []
[2023-04-13T10:35:49.643179+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2023-04-13T10:35:49.643477+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"notebook"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"notebook"},"types":{"1":2}} []
[2023-04-13T10:35:49.647577+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2023-04-13T10:35:49.647874+00:00] doctrine.DEBUG: Executing statement: SELECT c.TABLE_NAME,       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE        AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' ORDER BY ORDINAL_POSITION (parameters: array{"1":"notebook","2":"notebook"}, types: array{"1":2,"2":2}) {"sql":"SELECT c.TABLE_NAME,       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE        AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' ORDER BY ORDINAL_POSITION","params":{"1":"notebook","2":"notebook"},"types":{"1":2,"2":2}} []
[2023-04-13T10:35:49.654657+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME,        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"notebook"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME,        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? ORDER BY SEQ_IN_INDEX","params":{"1":"notebook"},"types":{"1":2}} []
[2023-04-13T10:35:49.655118+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT k.TABLE_NAME,            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'notebook' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"notebook"}, types: array{"1":2}) {"sql":"SELECT DISTINCT k.TABLE_NAME,            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'notebook' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"notebook"},"types":{"1":2}} []
[2023-04-13T10:35:49.655870+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"notebook"}, types: array{"1":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"notebook"},"types":{"1":2}} []
[2023-04-13T10:35:49.658820+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2023-04-13T10:35:49.693967+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2023-04-13T10:35:49.722540+00:00] doctrine.INFO: Disconnecting [] []
[2023-04-13T10:36:00.493803+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":8889,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":[],"dbname":"notebook","serverVersion":"8","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":8889,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":[],"dbname":"notebook","serverVersion":"8","charset":"utf8mb4"}} []
[2023-04-13T10:36:00.498213+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2023-04-13T10:36:02.495651+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2023-04-13T10:36:02.497951+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"notebook"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"notebook"},"types":{"1":2}} []
[2023-04-13T10:36:02.521978+00:00] doctrine.DEBUG: Executing statement: CREATE TABLE doctrine_migration_versions (version VARCHAR(191) NOT NULL, executed_at DATETIME DEFAULT NULL, execution_time INT DEFAULT NULL, PRIMARY KEY(version)) DEFAULT CHARACTER SET utf8 COLLATE `utf8_unicode_ci` ENGINE = InnoDB {"sql":"CREATE TABLE doctrine_migration_versions (version VARCHAR(191) NOT NULL, executed_at DATETIME DEFAULT NULL, execution_time INT DEFAULT NULL, PRIMARY KEY(version)) DEFAULT CHARACTER SET utf8 COLLATE `utf8_unicode_ci` ENGINE = InnoDB"} []
[2023-04-13T10:36:02.562120+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2023-04-13T10:36:02.568486+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2023-04-13T10:36:02.568862+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2023-04-13T10:36:02.576186+00:00] doctrine.DEBUG: Beginning transaction [] []
[2023-04-13T10:36:02.589104+00:00] doctrine.DEBUG: Executing query: CREATE TABLE category (id INT AUTO_INCREMENT NOT NULL, title VARCHAR(255) NOT NULL, color VARCHAR(100) NOT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB {"sql":"CREATE TABLE category (id INT AUTO_INCREMENT NOT NULL, title VARCHAR(255) NOT NULL, color VARCHAR(100) NOT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB"} []
[2023-04-13T10:36:02.614477+00:00] doctrine.DEBUG: Executing query: CREATE TABLE note (id INT AUTO_INCREMENT NOT NULL, title VARCHAR(255) NOT NULL, created_at DATETIME NOT NULL COMMENT '(DC2Type:datetime_immutable)', updated_at DATETIME NOT NULL COMMENT '(DC2Type:datetime_immutable)', author VARCHAR(50) NOT NULL, content VARCHAR(255) NOT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB {"sql":"CREATE TABLE note (id INT AUTO_INCREMENT NOT NULL, title VARCHAR(255) NOT NULL, created_at DATETIME NOT NULL COMMENT '(DC2Type:datetime_immutable)', updated_at DATETIME NOT NULL COMMENT '(DC2Type:datetime_immutable)', author VARCHAR(50) NOT NULL, content VARCHAR(255) NOT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB"} []
[2023-04-13T10:36:02.635852+00:00] doctrine.DEBUG: Executing query: CREATE TABLE messenger_messages (id BIGINT AUTO_INCREMENT NOT NULL, body LONGTEXT NOT NULL, headers LONGTEXT NOT NULL, queue_name VARCHAR(190) NOT NULL, created_at DATETIME NOT NULL, available_at DATETIME NOT NULL, delivered_at DATETIME DEFAULT NULL, INDEX IDX_75EA56E0FB7336F0 (queue_name), INDEX IDX_75EA56E0E3BD61CE (available_at), INDEX IDX_75EA56E016BA31DB (delivered_at), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB {"sql":"CREATE TABLE messenger_messages (id BIGINT AUTO_INCREMENT NOT NULL, body LONGTEXT NOT NULL, headers LONGTEXT NOT NULL, queue_name VARCHAR(190) NOT NULL, created_at DATETIME NOT NULL, available_at DATETIME NOT NULL, delivered_at DATETIME DEFAULT NULL, INDEX IDX_75EA56E0FB7336F0 (queue_name), INDEX IDX_75EA56E0E3BD61CE (available_at), INDEX IDX_75EA56E016BA31DB (delivered_at), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB"} []
[2023-04-13T10:36:02.662339+00:00] doctrine.DEBUG: Executing statement: INSERT INTO doctrine_migration_versions (version, executed_at, execution_time) VALUES (?, ?, ?) (parameters: array{"1":"DoctrineMigrations\\Version20230413103549","2":"2023-04-13 10:36:02","3":84}, types: array{"1":2,"2":2,"3":1}) {"sql":"INSERT INTO doctrine_migration_versions (version, executed_at, execution_time) VALUES (?, ?, ?)","params":{"1":"DoctrineMigrations\\Version20230413103549","2":"2023-04-13 10:36:02","3":84},"types":{"1":2,"2":2,"3":1}} []
[2023-04-13T10:36:02.679212+00:00] doctrine.INFO: Disconnecting [] []
[2023-04-13T10:37:24.651217+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":8889,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":[],"dbname":"notebook","serverVersion":"8","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":8889,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":[],"dbname":"notebook","serverVersion":"8","charset":"utf8mb4"}} []
[2023-04-13T10:37:24.659054+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2023-04-13T10:47:25.612219+00:00] doctrine.DEBUG: Beginning transaction [] []
[2023-04-13T10:47:25.670734+00:00] doctrine.DEBUG: Executing statement: DELETE FROM category {"sql":"DELETE FROM category"} []
[2023-04-13T10:47:25.674375+00:00] doctrine.DEBUG: Executing statement: DELETE FROM note {"sql":"DELETE FROM note"} []
[2023-04-13T10:47:25.675981+00:00] doctrine.DEBUG: Rolling back transaction [] []
[2023-04-13T10:47:25.680357+00:00] console.CRITICAL: Error thrown while running command "--env=dev doctrine:fixtures:load". Message: "App\Entity\Category::setTitle(): Argument #1 ($title) must be of type string, App\Entity\Category given, called in /Users/faisalbouazi/Desktop/Symfony2/notebook-symfony/src/DataFixtures/AppFixtures.php on line 34" {"exception":"[object] (TypeError(code: 0): App\\Entity\\Category::setTitle(): Argument #1 ($title) must be of type string, App\\Entity\\Category given, called in /Users/faisalbouazi/Desktop/Symfony2/notebook-symfony/src/DataFixtures/AppFixtures.php on line 34 at /Users/faisalbouazi/Desktop/Symfony2/notebook-symfony/src/Entity/Category.php:32)","command":"--env=dev doctrine:fixtures:load","message":"App\\Entity\\Category::setTitle(): Argument #1 ($title) must be of type string, App\\Entity\\Category given, called in /Users/faisalbouazi/Desktop/Symfony2/notebook-symfony/src/DataFixtures/AppFixtures.php on line 34"} []
[2023-04-13T10:47:25.681003+00:00] console.DEBUG: Command "--env=dev doctrine:fixtures:load" exited with code "1" {"command":"--env=dev doctrine:fixtures:load","code":1} []
[2023-04-13T10:47:25.681724+00:00] php.CRITICAL: Uncaught Error: App\Entity\Category::setTitle(): Argument #1 ($title) must be of type string, App\Entity\Category given, called in /Users/faisalbouazi/Desktop/Symfony2/notebook-symfony/src/DataFixtures/AppFixtures.php on line 34 {"exception":"[object] (TypeError(code: 0): App\\Entity\\Category::setTitle(): Argument #1 ($title) must be of type string, App\\Entity\\Category given, called in /Users/faisalbouazi/Desktop/Symfony2/notebook-symfony/src/DataFixtures/AppFixtures.php on line 34 at /Users/faisalbouazi/Desktop/Symfony2/notebook-symfony/src/Entity/Category.php:32)"} []
[2023-04-13T10:47:25.691923+00:00] doctrine.INFO: Disconnecting [] []
[2023-04-13T10:59:09.299073+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":8889,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":[],"dbname":"notebook","serverVersion":"8","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":8889,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":[],"dbname":"notebook","serverVersion":"8","charset":"utf8mb4"}} []
[2023-04-13T10:59:09.307898+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2023-04-13T10:59:11.172491+00:00] doctrine.DEBUG: Beginning transaction [] []
[2023-04-13T10:59:11.225267+00:00] doctrine.DEBUG: Executing statement: DELETE FROM category {"sql":"DELETE FROM category"} []
[2023-04-13T10:59:11.225716+00:00] doctrine.DEBUG: Executing statement: DELETE FROM note {"sql":"DELETE FROM note"} []
[2023-04-13T10:59:11.239071+00:00] doctrine.DEBUG: Executing statement: INSERT INTO category (title, color) VALUES (?, ?) (parameters: array{"1":"PHP","2":"pink"}, types: array{"1":2,"2":2}) {"sql":"INSERT INTO category (title, color) VALUES (?, ?)","params":{"1":"PHP","2":"pink"},"types":{"1":2,"2":2}} []
[2023-04-13T10:59:11.239679+00:00] doctrine.DEBUG: Executing statement: INSERT INTO category (title, color) VALUES (?, ?) (parameters: array{"1":"Symfony","2":"grey"}, types: array{"1":2,"2":2}) {"sql":"INSERT INTO category (title, color) VALUES (?, ?)","params":{"1":"Symfony","2":"grey"},"types":{"1":2,"2":2}} []
[2023-04-13T10:59:11.240244+00:00] doctrine.DEBUG: Executing statement: INSERT INTO category (title, color) VALUES (?, ?) (parameters: array{"1":"Doctrine","2":"olive"}, types: array{"1":2,"2":2}) {"sql":"INSERT INTO category (title, color) VALUES (?, ?)","params":{"1":"Doctrine","2":"olive"},"types":{"1":2,"2":2}} []
[2023-04-13T10:59:11.240958+00:00] doctrine.DEBUG: Executing statement: INSERT INTO category (title, color) VALUES (?, ?) (parameters: array{"1":"Twig","2":"brown"}, types: array{"1":2,"2":2}) {"sql":"INSERT INTO category (title, color) VALUES (?, ?)","params":{"1":"Twig","2":"brown"},"types":{"1":2,"2":2}} []
[2023-04-13T10:59:11.241393+00:00] doctrine.DEBUG: Executing statement: INSERT INTO category (title, color) VALUES (?, ?) (parameters: array{"1":"MySQL","2":"fuchsia"}, types: array{"1":2,"2":2}) {"sql":"INSERT INTO category (title, color) VALUES (?, ?)","params":{"1":"MySQL","2":"fuchsia"},"types":{"1":2,"2":2}} []
[2023-04-13T10:59:11.241797+00:00] doctrine.DEBUG: Executing statement: INSERT INTO category (title, color) VALUES (?, ?) (parameters: array{"1":"JavaScript","2":"yellow"}, types: array{"1":2,"2":2}) {"sql":"INSERT INTO category (title, color) VALUES (?, ?)","params":{"1":"JavaScript","2":"yellow"},"types":{"1":2,"2":2}} []
[2023-04-13T10:59:11.242102+00:00] doctrine.DEBUG: Executing statement: INSERT INTO category (title, color) VALUES (?, ?) (parameters: array{"1":"React","2":"black"}, types: array{"1":2,"2":2}) {"sql":"INSERT INTO category (title, color) VALUES (?, ?)","params":{"1":"React","2":"black"},"types":{"1":2,"2":2}} []
[2023-04-13T10:59:11.242401+00:00] doctrine.DEBUG: Executing statement: INSERT INTO category (title, color) VALUES (?, ?) (parameters: array{"1":"Vue","2":"yellow"}, types: array{"1":2,"2":2}) {"sql":"INSERT INTO category (title, color) VALUES (?, ?)","params":{"1":"Vue","2":"yellow"},"types":{"1":2,"2":2}} []
[2023-04-13T10:59:11.242674+00:00] doctrine.DEBUG: Executing statement: INSERT INTO category (title, color) VALUES (?, ?) (parameters: array{"1":"Angular","2":"pink"}, types: array{"1":2,"2":2}) {"sql":"INSERT INTO category (title, color) VALUES (?, ?)","params":{"1":"Angular","2":"pink"},"types":{"1":2,"2":2}} []
[2023-04-13T10:59:11.243310+00:00] doctrine.DEBUG: Executing statement: INSERT INTO category (title, color) VALUES (?, ?) (parameters: array{"1":"NodeJS","2":"purple"}, types: array{"1":2,"2":2}) {"sql":"INSERT INTO category (title, color) VALUES (?, ?)","params":{"1":"NodeJS","2":"purple"},"types":{"1":2,"2":2}} []
[2023-04-13T10:59:11.244940+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.245523+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.246161+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.246461+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.246691+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.246950+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.247232+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.247516+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.247766+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.248001+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.248242+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.248479+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.248943+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.249248+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.249495+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.249763+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.250006+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.250247+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.250489+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.250728+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.250964+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.251200+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.251458+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.251943+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.252207+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.252451+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.252684+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.252914+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.253167+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.253403+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.253639+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.253876+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.254110+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.254345+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.254729+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.255037+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.255285+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.255531+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.255765+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.256003+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.256238+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.256475+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.256732+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.256969+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.257213+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.257635+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.257921+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.258168+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.258408+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.258666+00:00] doctrine.DEBUG: Executing statement: INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO note (title, created_at, updated_at, author, content) VALUES (?, ?, ?, ?, ?)","params":{"1":"My first note","2":"2023-04-13 10:59:11","3":"2023-04-13 10:59:11","4":"Jensone","5":"This is my first note"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2023-04-13T10:59:11.259137+00:00] doctrine.DEBUG: Committing transaction [] []
[2023-04-13T10:59:11.261968+00:00] doctrine.INFO: Disconnecting [] []
[2023-04-13T12:31:15.021166+00:00] deprecation.INFO: User Deprecated: The "Monolog\Logger" class is considered final. It may change without further notice as of its next major version. You should not extend it from "Symfony\Bridge\Monolog\Logger". {"exception":"[object] (ErrorException(code: 0): User Deprecated: The \"Monolog\\Logger\" class is considered final. It may change without further notice as of its next major version. You should not extend it from \"Symfony\\Bridge\\Monolog\\Logger\". at /Users/faisalbouazi/Desktop/Symfony2/notebook-symfony/vendor/symfony/error-handler/DebugClassLoader.php:337)"} []
[2023-04-13T12:31:27.194521+00:00] deprecation.INFO: User Deprecated: The "Monolog\Logger" class is considered final. It may change without further notice as of its next major version. You should not extend it from "Symfony\Bridge\Monolog\Logger". {"exception":"[object] (ErrorException(code: 0): User Deprecated: The \"Monolog\\Logger\" class is considered final. It may change without further notice as of its next major version. You should not extend it from \"Symfony\\Bridge\\Monolog\\Logger\". at /Users/faisalbouazi/Desktop/Symfony2/notebook-symfony/vendor/symfony/error-handler/DebugClassLoader.php:337)"} []
[2023-04-13T12:31:45.725898+00:00] deprecation.INFO: User Deprecated: The "Monolog\Logger" class is considered final. It may change without further notice as of its next major version. You should not extend it from "Symfony\Bridge\Monolog\Logger". {"exception":"[object] (ErrorException(code: 0): User Deprecated: The \"Monolog\\Logger\" class is considered final. It may change without further notice as of its next major version. You should not extend it from \"Symfony\\Bridge\\Monolog\\Logger\". at /Users/faisalbouazi/Desktop/Symfony2/notebook-symfony/vendor/symfony/error-handler/DebugClassLoader.php:337)"} []
[2023-04-13T12:42:10.055451+00:00] deprecation.INFO: User Deprecated: The "Monolog\Logger" class is considered final. It may change without further notice as of its next major version. You should not extend it from "Symfony\Bridge\Monolog\Logger". {"exception":"[object] (ErrorException(code: 0): User Deprecated: The \"Monolog\\Logger\" class is considered final. It may change without further notice as of its next major version. You should not extend it from \"Symfony\\Bridge\\Monolog\\Logger\". at /Users/faisalbouazi/Desktop/Symfony2/notebook-symfony/vendor/symfony/error-handler/DebugClassLoader.php:337)"} []
[2023-04-13T12:42:10.070894+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":8889,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":[],"dbname":"notebook","serverVersion":"8","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":8889,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":[],"dbname":"notebook","serverVersion":"8","charset":"utf8mb4"}} []
[2023-04-13T12:42:10.075101+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2023-04-13T12:42:10.079676+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"notebook"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"notebook"},"types":{"1":2}} []
[2023-04-13T12:42:10.081108+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2023-04-13T12:42:10.081383+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"notebook"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"notebook"},"types":{"1":2}} []
[2023-04-13T12:42:10.097557+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2023-04-13T12:42:10.097915+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"notebook","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"notebook","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2023-04-13T12:42:10.099258+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2023-04-13T12:42:10.099567+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'notebook' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"notebook","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'notebook' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"notebook","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2023-04-13T12:42:10.101573+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE        AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"notebook","2":"notebook","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE        AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"notebook","2":"notebook","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2023-04-13T12:42:10.104470+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2023-04-13T12:42:10.106059+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"notebook","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"notebook","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2023-04-13T12:42:10.110522+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2023-04-13T12:42:10.115493+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2023-04-13T12:42:10.115803+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"notebook"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"notebook"},"types":{"1":2}} []
[2023-04-13T12:42:10.116372+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2023-04-13T12:42:10.116609+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"notebook"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"notebook"},"types":{"1":2}} []
[2023-04-13T12:42:10.117146+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2023-04-13T12:42:10.117382+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"notebook","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"notebook","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2023-04-13T12:42:10.118441+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2023-04-13T12:42:10.118707+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'notebook' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"notebook","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'notebook' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"notebook","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2023-04-13T12:42:10.119391+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE        AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"notebook","2":"notebook","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE        AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"notebook","2":"notebook","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2023-04-13T12:42:10.120478+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2023-04-13T12:42:10.121211+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"notebook","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"notebook","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2023-04-13T12:42:10.121911+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2023-04-13T12:42:10.125481+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2023-04-13T12:42:10.125800+00:00] doctrine.DEBUG: Executing statement: SELECT c.TABLE_NAME,       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE        AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' ORDER BY ORDINAL_POSITION (parameters: array{"1":"notebook","2":"notebook"}, types: array{"1":2,"2":2}) {"sql":"SELECT c.TABLE_NAME,       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE        AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' ORDER BY ORDINAL_POSITION","params":{"1":"notebook","2":"notebook"},"types":{"1":2,"2":2}} []
[2023-04-13T12:42:10.127360+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME,        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"notebook"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME,        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? ORDER BY SEQ_IN_INDEX","params":{"1":"notebook"},"types":{"1":2}} []
[2023-04-13T12:42:10.128022+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT k.TABLE_NAME,            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'notebook' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"notebook"}, types: array{"1":2}) {"sql":"SELECT DISTINCT k.TABLE_NAME,            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'notebook' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"notebook"},"types":{"1":2}} []
[2023-04-13T12:42:10.128821+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"notebook"}, types: array{"1":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"notebook"},"types":{"1":2}} []
[2023-04-13T12:42:10.131548+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2023-04-13T12:42:10.151731+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2023-04-13T12:42:10.222125+00:00] doctrine.INFO: Disconnecting [] []
[2023-04-13T12:43:37.111465+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":8889,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":[],"dbname":"notebook","serverVersion":"8","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":8889,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":[],"dbname":"notebook","serverVersion":"8","charset":"utf8mb4"}} []
[2023-04-13T12:43:37.118967+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2023-04-13T12:43:40.263978+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2023-04-13T12:43:40.267395+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"notebook"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"notebook"},"types":{"1":2}} []
[2023-04-13T12:43:40.305370+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2023-04-13T12:43:40.305703+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"notebook","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"notebook","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2023-04-13T12:43:40.306528+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2023-04-13T12:43:40.306846+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'notebook' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"notebook","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'notebook' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"notebook","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2023-04-13T12:43:40.307549+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE        AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"notebook","2":"notebook","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE        AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"notebook","2":"notebook","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2023-04-13T12:43:40.310467+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2023-04-13T12:43:40.310785+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"notebook","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"notebook","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2023-04-13T12:43:40.321922+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2023-04-13T12:43:40.323281+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2023-04-13T12:43:40.323731+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2023-04-13T12:43:40.332572+00:00] doctrine.DEBUG: Beginning transaction [] []
[2023-04-13T12:43:40.336438+00:00] doctrine.DEBUG: Executing query: CREATE TABLE `admin` (id INT AUTO_INCREMENT NOT NULL, email VARCHAR(180) NOT NULL, roles JSON NOT NULL, password VARCHAR(255) NOT NULL, UNIQUE INDEX UNIQ_880E0D76E7927C74 (email), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB {"sql":"CREATE TABLE `admin` (id INT AUTO_INCREMENT NOT NULL, email VARCHAR(180) NOT NULL, roles JSON NOT NULL, password VARCHAR(255) NOT NULL, UNIQUE INDEX UNIQ_880E0D76E7927C74 (email), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB"} []
[2023-04-13T12:43:40.363627+00:00] doctrine.DEBUG: Executing statement: INSERT INTO doctrine_migration_versions (version, executed_at, execution_time) VALUES (?, ?, ?) (parameters: array{"1":"DoctrineMigrations\\Version20230413124210","2":"2023-04-13 12:43:40","3":30}, types: array{"1":2,"2":2,"3":1}) {"sql":"INSERT INTO doctrine_migration_versions (version, executed_at, execution_time) VALUES (?, ?, ?)","params":{"1":"DoctrineMigrations\\Version20230413124210","2":"2023-04-13 12:43:40","3":30},"types":{"1":2,"2":2,"3":1}} []
[2023-04-13T12:43:40.391487+00:00] doctrine.INFO: Disconnecting [] []
[2023-04-13T13:15:35.503021+00:00] deprecation.INFO: User Deprecated: The "Monolog\Logger" class is considered final. It may change without further notice as of its next major version. You should not extend it from "Symfony\Bridge\Monolog\Logger". {"exception":"[object] (ErrorException(code: 0): User Deprecated: The \"Monolog\\Logger\" class is considered final. It may change without further notice as of its next major version. You should not extend it from \"Symfony\\Bridge\\Monolog\\Logger\". at /Users/faisalbouazi/Desktop/Symfony2/notebook-symfony/vendor/symfony/error-handler/DebugClassLoader.php:337)"} []
[2023-04-13T13:15:35.836717+00:00] request.ERROR: Uncaught PHP Exception Symfony\Component\HttpKernel\Exception\NotFoundHttpException: "No route found for "GET http://127.0.0.1:8000/"" at /Users/faisalbouazi/Desktop/Symfony2/notebook-symfony/vendor/symfony/http-kernel/EventListener/RouterListener.php line 127 {"exception":"[object] (Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException(code: 0): No route found for \"GET http://127.0.0.1:8000/\" at /Users/faisalbouazi/Desktop/Symfony2/notebook-symfony/vendor/symfony/http-kernel/EventListener/RouterListener.php:127)\n[previous exception] [object] (Symfony\\Component\\Routing\\Exception\\NoConfigurationException(code: 0):  at /Users/faisalbouazi/Desktop/Symfony2/notebook-symfony/vendor/symfony/routing/Matcher/Dumper/CompiledUrlMatcherTrait.php:185)"} []
[2023-04-13T13:15:35.955913+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"22e3fa"},"request_uri":"http://127.0.0.1:8000/_wdt/22e3fa","method":"GET"} []
[2023-04-13T13:15:36.194492+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"22e3fa"},"request_uri":"http://127.0.0.1:8000/_wdt/22e3fa","method":"GET"} []
[2023-04-13T13:15:36.641765+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"22e3fa"},"request_uri":"http://127.0.0.1:8000/_wdt/22e3fa","method":"GET"} []
[2023-04-13T13:15:40.153373+00:00] request.ERROR: Uncaught PHP Exception Symfony\Component\HttpKernel\Exception\NotFoundHttpException: "No route found for "GET http://127.0.0.1:8000/livres"" at /Users/faisalbouazi/Desktop/Symfony2/notebook-symfony/vendor/symfony/http-kernel/EventListener/RouterListener.php line 127 {"exception":"[object] (Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException(code: 0): No route found for \"GET http://127.0.0.1:8000/livres\" at /Users/faisalbouazi/Desktop/Symfony2/notebook-symfony/vendor/symfony/http-kernel/EventListener/RouterListener.php:127)\n[previous exception] [object] (Symfony\\Component\\Routing\\Exception\\ResourceNotFoundException(code: 0): No routes found for \"/livres/\". at /Users/faisalbouazi/Desktop/Symfony2/notebook-symfony/vendor/symfony/routing/Matcher/Dumper/CompiledUrlMatcherTrait.php:74)"} []
[2023-04-13T13:15:45.972609+00:00] request.INFO: Matched route "app_login". {"route":"app_login","route_parameters":{"_route":"app_login","_controller":"App\\Controller\\SecurityController::login"},"request_uri":"http://127.0.0.1:8000/login","method":"GET"} []
[2023-04-13T13:15:45.975700+00:00] security.DEBUG: Checking for authenticator support. {"firewall_name":"main","authenticators":1} []
[2023-04-13T13:15:45.975803+00:00] security.DEBUG: Checking support on authenticator. {"firewall_name":"main","authenticator":"App\\Security\\LoginFormAuthenticator"} []
[2023-04-13T13:15:45.975849+00:00] security.DEBUG: Authenticator does not support the request. {"firewall_name":"main","authenticator":"App\\Security\\LoginFormAuthenticator"} []
[2023-04-13T13:15:46.091067+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"5d5118"},"request_uri":"http://127.0.0.1:8000/_wdt/5d5118","method":"GET"} []
[2023-04-13T13:15:49.464642+00:00] request.INFO: Matched route "app_login". {"route":"app_login","route_parameters":{"_route":"app_login","_controller":"App\\Controller\\SecurityController::login"},"request_uri":"http://127.0.0.1:8000/login","method":"GET"} []
[2023-04-13T13:15:49.465664+00:00] security.DEBUG: Checking for authenticator support. {"firewall_name":"main","authenticators":1} []
[2023-04-13T13:15:49.465753+00:00] security.DEBUG: Checking support on authenticator. {"firewall_name":"main","authenticator":"App\\Security\\LoginFormAuthenticator"} []
[2023-04-13T13:15:49.465885+00:00] security.DEBUG: Authenticator does not support the request. {"firewall_name":"main","authenticator":"App\\Security\\LoginFormAuthenticator"} []
[2023-04-13T13:15:49.535104+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"75d2f2"},"request_uri":"http://127.0.0.1:8000/_wdt/75d2f2","method":"GET"} []
[2023-04-13T13:15:49.680089+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"75d2f2"},"request_uri":"http://127.0.0.1:8000/_wdt/75d2f2","method":"GET"} []
[2023-04-13T13:15:50.225868+00:00] request.ERROR: Uncaught PHP Exception Symfony\Component\HttpKernel\Exception\NotFoundHttpException: "No route found for "GET http://127.0.0.1:8000/"" at /Users/faisalbouazi/Desktop/Symfony2/notebook-symfony/vendor/symfony/http-kernel/EventListener/RouterListener.php line 127 {"exception":"[object] (Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException(code: 0): No route found for \"GET http://127.0.0.1:8000/\" at /Users/faisalbouazi/Desktop/Symfony2/notebook-symfony/vendor/symfony/http-kernel/EventListener/RouterListener.php:127)\n[previous exception] [object] (Symfony\\Component\\Routing\\Exception\\NoConfigurationException(code: 0):  at /Users/faisalbouazi/Desktop/Symfony2/notebook-symfony/vendor/symfony/routing/Matcher/Dumper/CompiledUrlMatcherTrait.php:185)"} []
[2023-04-13T13:15:50.305564+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"74d4a5"},"request_uri":"http://127.0.0.1:8000/_wdt/74d4a5","method":"GET"} []
